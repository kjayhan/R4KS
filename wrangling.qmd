# Data Wrangling

In this chapter, we will learn how to wrangle data mainly using the `dplyr` package. We will learn how to select, filter, arrange, mutate, group, and summarize data. We will learn how to join data from different sources, working with dates, and converting data to long and wide formats.

As an example for this chapter, we will use Korea's trade data, [`trade_data`](https://kdiplo.com/reference/trade_data), from the [`kdiplo`](https://github.com/kjayhan/kdiplo/) package. Let's install the package. You can install the development version from GitHub with:

```{r}
# install.packages("devtools") # if you haven't installed the devtools package yet, remove the # sign.

devtools::install_github("kjayhan/kdiplo")
```

Let's load the libraries and the data.

```{r}
library(tidyverse) # load the tidyverse package which includes dplyr, ggplot2, tidyr, readr, purrr, and tibble and more.

library(kdiplo) # load the kdiplo package
```

Let's take a quick look at the data.

```{r}
head(trade_data)
```

We can read the data's documentation using the `?` function.

```{r}
?trade_data
```

Let's assign the data to a new object.

```{r}
trade_data <- trade_data
```

## Selecting columns

We do not need all the columns in the data. We can select the columns we need using the `select()` function. For now, I will select only five columns: `iso3c` (country code), `country` (country name), `year` (year), `export_kosis` (Korea's exports as reported by Korean Statistical Information Service (KOSIS)), and `import_kosis` (Korea's exports as reported by KOSIS).

We can either assign the updated object with the selected columns to the same object or a new object. Here, I will assign the updated object to a new object.

```{r}
trade <- trade_data |>
  select(iso3c, country, year, export_kosis, import_kosis)
```

Let's see how many rows and columns `trade_data` and `trade` have.

```{r}
nrow(trade_data) # number of rows in trade_data
```

```{r}
ncol(trade_data) # number of columns in trade_data
```

```{r}
nrow(trade) # number of rows in trade
```

```{r}
ncol(trade) # number of columns in trade
```

`trade_data` has `r nrow(trade_data)` rows and `r ncol(trade_data)` columns. `trade` has `r nrow(trade)` rows and `r ncol(trade)` columns.

## Filtering rows

We can filter rows based on a condition using the `filter()` function. Here, I will filter rows where the year is larger than 1964. Indeed, KOSIS data starts from 1965. This time, I will assign the updated object to the same object. We need a condition for filtering. In this case, the condition is `year > 1964`. It is the same as `year >= 1965`.

```{r}
trade <- trade |>
  filter(year > 1964)
```

Let's create a new object with the data from only 2019. `==` is the condition for equality. We need to use `==` instead of `=` for equality condition, and we need to be careful about it.

```{r}
trade_2019 <- trade |>
  filter(year == 2019)

# let's see what the data looks like:
head(trade_2019)
```

Let's create a new object with the data from only three countries: United States, China, and Japan. We need to use `%in%` as a condition for multiple values that we look for in the dataframe.

```{r}
trade_us_china_japan <- trade |>
  filter(country %in% c("United States", "China", "Japan"))

# let's see what the data looks like:
head(trade_us_china_japan)
```

We can filter the rows for multiple years using the `%in%` operator as well. Let's create a new object with the data from 2015, 2016, 2017, and 2018. `:` is used to create a sequence of numbers. `2015:2018` creates a sequence of numbers from 2015 to 2018.

```{r}
trade_2015_2018 <- trade |>
  filter(year %in% 2015:2018)
```

We can also filter rows based on multiple conditions. Let's create a new object with the data from 2015, 2016, 2017, and 2018 using the `&` operator, which means "and".

```{r}
trade_2015_2018_backup <- trade |>
  filter(year >= 2015 # year is greater than or equal to 2015
         & # and
         year <= 2018 # year is less than or equal to 2018
         )
```

Let's check if `trade_2015_2018` and `trade_2015_2018_backup` are the same.

```{r}
identical(trade_2015_2018, trade_2015_2018_backup)
```

Now, let's filter the data for 2015, 2016, 2017, and 2018 for the United States, China, and Japan, this time using country codes.

```{r}
trade_us_china_japan_2015_2018 <- trade |>
  filter(year %in% 2015:2018 # included years are 2015, 2016, 2017, and 2018
         & # and
         iso3c %in% c("USA", "CHN", "JPN") # included country codes are USA, CHN, and JPN
         )

# let's see what the data looks like:
head(trade_us_china_japan_2015_2018)
```

Two other operators that we can use for filtering are `|` and `!`. `|` means "or" and `!` means "not". Let's create a new object with the data for 2015, 2016, 2017, and 2018 or the export volume is larger than 100 billion USD.

```{r}
trade_2015_2018_or_export <- trade |>
  filter(year %in% 2015:2018 # included years are 2015, 2016, 2017, and 2018
         | #or
         export_kosis > 110000000000 # export volume is larger than 110 billion USD
         )
```

Let's see what else is included that is not in the years 2015, 2016, 2017, and 2018.

```{r}
trade_2015_2018_or_export |>
  filter(!year %in% 2015:2018) #  excluded years are 2015, 2016, 2017, and 2018
```

## Arranging rows

We can arrange rows based on a column using the `arrange()` function. Let's arrange the data by year in ascending order.

```{r}
trade <- trade |>
  arrange(year)

head(trade)
```

We can arrange by year in descending order.

```{r}
trade <- trade |>
  arrange(desc(year))

head(trade)
```

We can arrange alphabetically by country codes in ascending order.

```{r}
trade <- trade |>
  arrange(iso3c)

head(trade)
```

## Mutating columns

We can create new columns or update existing columns using the `mutate()` function. Let's create a new column, `trade_kosis`, which is the total trade volume of Korea with a country in a year. The total trade volume is the sum of exports and imports.

```{r}
trade <- trade |>
  mutate(trade_kosis = export_kosis + import_kosis)

head(trade)
```

## Grouping and summarizing data

We can group data based on one or more columns using the `group_by()` function. We can summarize data based on the groups using the `summarize()` function. Let's group the data by year and summarize the total trade volume of Korea in each year.

We need to be careful about one thing. There are missing values in the data. We need to ignore them (in other words treat them as zero) when we calculate the total trade volume. Otherwise, the total trade volume will be `NA` if there is at least one missing value in the data for a year. We can use the `na.rm = TRUE` argument in the `sum()` function to remove missing values.

```{r}
trade_volume <- trade |>
  group_by(year) |>
  summarize(total_trade_kosis = sum(trade_kosis, na.rm = TRUE)) |>
  arrange(desc(total_trade_kosis))

head(trade_volume)
```

We can also group the data by country. Let's summarize the total trade volume of Korea with each country since 1965.

```{r}
trade_country <- trade |>
  group_by(country) |>
  summarize(total_trade_kosis = sum(trade_kosis, na.rm = TRUE)) |>
  arrange(desc(total_trade_kosis))

head(trade_country)
```

## Conditional Mutating

We can conditionally mutate columns using the `case_when()` function. Let's create a new column, `trade_status`, which is "surplus" if the export volume is larger than the import volume, "deficit" if the import volume is larger than the export volume, and "balanced" if the export volume is equal to the import volume. If the export or import volume is missing, we will make the trade status "unknown". We can use `is.na()` to check if a value is missing.

```{r}
trade <- trade |>
  mutate(trade_status = case_when(
    export_kosis > import_kosis ~ "surplus", # export volume is larger than import volume
    export_kosis < import_kosis ~ "deficit", # export volume is less than import volume
    export_kosis == import_kosis ~ "balanced", # export volume is equal to import volume
    is.na(export_kosis) | is.na(import_kosis) ~ "unknown", # export or import volume is missing
    TRUE ~ "everything else" # in this instance, we do not need "TRUE ~" since we cover all `case_when()` options above. But in other cases, you may need it. "TRUE ~" basically helps you assign a new value for every other condition that is not mentioned above.
  ))

head(trade)
```

In this instance, we do not need "TRUE \~" since we cover all `case_when()` options above. But in other cases, you may need it. "TRUE \~" basically helps you assign a new value for every other condition that is not mentioned above.

We can create a table using the `table()` function for the trade status of Korea since 1965.

```{r}
table(trade$trade_status)
```

## Merging datasets

Right now, we only have one dataset. Let's get another dataset from the `WDI` package, which includes World Bank's World Development Indicators data. Let's install the package if you do not have it yet.

```{r}
# install.packages("WDI") # if you haven't installed the WDI package yet, remove the # sign.

library(WDI) # load the WDI package
```

Let's get the data for the GDP of all countries since 1965. You can search for indicators from the World Bank's World Development Indicators database [here](https://databank.worldbank.org/source/world-development-indicators) or using the `WDIsearch` function in the `WDI` package. For details, you can check out `WDI`'s documentation using the `?` function or [its Github page](https://github.com/vincentarelbundock/WDI).

```{r}

wdi <- WDI(country = "all", # all countries
           indicator = c("gdp" = "NY.GDP.MKTP.KD", # GDP at constant 2015 US dollars
                         "gdp_pc" = "NY.GDP.PCAP.KD"), # GDP per capita at constant 2015 US dollars 
           start = 1965, # start year
           end = 2024, # end year
           extra = TRUE, # include extra columns included in the WDI package defaults
           language = "en" # language is English
           )

head(wdi)
```

We wanted extra WDI data, but we don't need all. Let's select the ones we need. This time, let's exclude the columns we do not need by using the `-` sign. Then let's exclude non-country groups (e.g., "High income", "Not classified") by filtering out rows where the `iso3c` column is missing. Then let's arrange the data by country code and year.

```{r}
wdi <- wdi |>
  #select(-iso2c, -status, -lastupdated, -capital, -lending, -longitude, -latitude) |> # exclude these columns
  filter(!is.na(iso3c)) |> # exclude the rows that are missing country codes (in other words, we only include the ones that are not (!) missing country codes (iso3c))
  arrange(iso3c, year) # arrange the data by country code and year

head(wdi)
```

This did not work out. Probably these entries are not missing, but instead simply empty! Let's check that. Let's try filtering out empty country codes (instead of missing country codes which we checked with `is.na()`).

```{r}
wdi <- wdi |>
  filter(iso3c != "") # exclude the rows that have empty country codes. We check it as an empty character. "!=" means not equal to.

head(wdi)
```

Yes, that was it. Instead of NA, those country code columns were empty for those rows. Now that we successfully filtered out the rows with empty country codes, let's join Korea's trade data with the WDI data. There are different types of joins. I will explain five of them. To make things easier, I will create smaller datasets for the demonstration. We will have only the data for the United States, China, and Japan in the trade data. We will have only the data for the United States, Japan and Italy in the WDI data.

```{r}
trade_df <- trade |>
  filter(iso3c %in% c("USA", "CHN", "JPN"))

head(trade_df)
```

```{r}
wdi_df <- wdi |>
  filter(iso3c %in% c("USA", "JPN", "ITA"))
```

![Dataframes](additional/dataframes.png)

### inner_join

`inner_join` returns only the rows that have matching values in both datasets. Let's join the `trade_df` and `wdi_df` datasets using the `iso3c` and `year` columns.

```{r}
inner_df <- inner_join(trade_df, wdi_df, by = c("iso3c", "year"))

# you can also write it like this:

# inner_df <- trade_df |> inner_join(wdi_df, by = c("iso3c", "year"), suffix = c("_trade", "_wdi"))


head(inner_df)
```

![inner_join](additional/inner_join2.png)

The column names that we will join by are the same in both dataframes ("iso3c" and "year"). If it was not the same, we could write the code as follows:

```{r}
inner_df <- inner_join(trade_df, wdi_df, by = c("iso3c" = "iso3c", "year" = "year")) # the first element is from the first dataframe and the second element is from the second dataframe.
```

If, for example, the country code column name was "country_code" and the year column was "Year" in `trade_df`, you would replace the first "iso3c" with "country_code" and the first "year" with "Year".

If there are columns with the same name in both dataframes other than the columns you use to join them, you can use the `suffix` argument to add a suffix to the column names. For example, in this case, we have columns named "country" in both dataframes. Since we didn't have suffix in the above code, we have two columns "country.x" and "country.y". If you want to add suffices, you can do it as follows:

```{r}
inner_df <- inner_join(trade_df, wdi_df, by = c("iso3c", "year"), suffix = c("_trade", "_wdi"))

head(inner_df)
```

### left_join

`left_join` returns all the rows from the left dataset and the matched rows from the right dataset. If there is no match, the result is `NA`. Let's join the `trade_df` and `wdi_df` datasets using the `iso3c` and `year` columns.

![left_join](additional/left_join2.png)

```{r}
left_df <- left_join(trade_df, wdi_df, by = c("iso3c", "year"))

head(left_df)
```

### right_join

`right_join` returns all the rows from the right dataset and the matched rows from the left dataset. If there is no match, the result is `NA`. Let's join the `trade_df` and `wdi_df` datasets using the `iso3c` and `year` columns.

![right_join](additional/right_join2.png)

```{r}
right_df <- right_join(trade_df, wdi_df, by = c("iso3c", "year"), suffix = c("_trade", "_wdi"))

head(right_df)
```

### full_join

`full_join` returns all the rows from both datasets. If there is no match, the result is `NA`. Let's join the `trade_df` and `wdi_df` datasets using the `iso3c` and `year` columns.

![full_join](additional/full_join2.png)

```{r}
full_df <- full_join(trade_df, wdi_df, by = c("iso3c", "year"), suffix = c("_trade", "_wdi"))

head(full_df)
```

### anti_join

`anti_join` returns all the rows from the left dataset that do not have a match in the right dataset. Let's join the `trade_df` and `wdi_df` datasets using the `iso3c` and `year` columns.

![anti_join](additional/anti_join2.png)

```{r}
anti_df <- anti_join(trade_df, wdi_df, by = c("iso3c", "year"))

head(anti_df)
```

## A Note on Country Codes

It is often easier to work with standard country codes than country names when we work with multiple datasets. There are a few widely used standard country codes. Above, we used the ISO 3166-1 alpha-3 country codes. There are other commonly used country codes such as Correlates of War (COW) country codes, Varieties of Democracy (V-Dem) country codes, and more.

We can convert country names to country codes using the `countrycode` package. Let's install the package if you do not have it yet.

```{r}
# install.packages("countrycode") # if you haven't installed the countrycode package yet, remove the # sign.

library(countrycode) # load the countrycode package
```

Let's convert the country names in the `trade_df` dataset to Correlates of War country codes. You can find the `countrycode` documentantion on its [Github page](https://github.com/vincentarelbundock/countrycode) or by using the `?` function.

```{r}
# ?countrycode

trade_df <- trade_df |>
  mutate(cown = countrycode(country, origin = "country.name", destination = "cown")) # convert country names to Correlates of War numeric country codes (cown)
```

## A Note on Working with Korean Country Names[^wrangling-1]

[^wrangling-1]: This subsection is adapted from the [vignette](https://kdiplo.com/articles/iso3c_kr-vignette) of the `iso3c_kr` function in the `kdiplo` package.

In my research, I often work with country-year data from Korean sources, including data on diplomatic visits, trade, aid and so on. One of the fundamental difficulties I have had is the lack of universal country codes across different datasets. Further complicating matters is the inconsistency of country names in these datasets. For example, Democratic Republic of the Congo has five different spellings across different official sources that I could find: `r paste(unique(kdiplo::iso3c_data$country_kr[kdiplo::iso3c_data$iso3c == "COD"]), collapse = ", ")`.

To address this issue, I have created a function in my `kdiplo` package that converts Korean country names into ISO 3166-1 alpha-3 (*iso3c*) country codes. This function, `iso3c_kr`, is designed to assign universal iso3c country codes to Korean-language country names that will make it easier to join different kinds of data.

One still needs to check if the output is correct, especially for countries that have gone through political transitions such as Germany, Yugoslavia, Russia, Vietnam, Yemen and so on.

Sometimes the Korean government sources have overlapping data for Yugoslavia and Serbia, for example. In such cases, one needs to check the data and make sure that the data is correct.

For example, the following is sample Korean trade data from [Korean Statistical Information Service (KOSIS)](https://kosis.kr/statHtml/statHtml.do?orgId=360&tblId=DT_1R11006_FRM101&conn_path=I3):

```{r}
# install.packages("readxl") # if you haven't installed the readxl package yet, remove the # sign.

library(readxl) # load the readxl package

# let's read the xlsx data

kosis_trade <- read_xlsx("data/kosis_trade_240330.xlsx")

# let's take a look at the data

# install.packages("gt") # if you haven't installed the gt package yet, remove the # sign.

# let's take a look at some of the data

# remember, [row, column] format can be used in R for subsetting dataframes. So, we can look at rows 533 to 538 and columns 1 and 57 to 62.

kosis_trade[533:538,c(1,57:62)] |> gt::gt() 

# you can use the gt package to create a table.
# you can use "::" to access the functions in the package without loading the package.
```

And, the following is sample Korean aid data from [Korea's ODA portal](https://stats.odakorea.go.kr/portal/odakorea/detail):

```{r}

aid <- read_xlsx("data/korea_total_aid_2019_230709.xlsx")


aid <- aid |> select(1:5) # we only need the first five columns

aid <- aid |> set_names(c("country_kr", "sector", "no_of_projects", "aid_usd", "aid_krw"))

# This sample data is only 2019; so we will add the year column, and assign 2019 to all rows.

aid$year <- 2019

# let's take a look at some of the data
aid[c(50, 150, 250, 350, 450),] |> gt::gt()
```

### Converting wide data to long format

Wide format is quite common in official Korean data sources. Trade data is in wide format. Before using the `iso3c_kr` function, let's first transform the trade data into a long (country-year) format to make it in the same format as the aid data. This will make joining the two datasets more feasible.

To convert the trade data into a long format, we will use the `pivot_longer()` function from the `tidyr` package.

```{r}
# we will divide the trade data into export and import data

export <- kosis_trade 

import <- kosis_trade
```

In `pivot_longer()`, we need to specify the columns that we want to pivot. In this case, we want to pivot columns 4 to 62, which are years. We also need to specify the names of the columns that will be created. In this case, we will create a column called `year` and a column called `export_kosis` for the export data. We will create a column called `year` and a column called `import_kosis` for the import data.

```{r}
export_long <- export |> 
  pivot_longer(4:62, names_to = "year", values_to = "export_kosis") # we will pivot the data from wide to long format
```

We can rename the columns using `set_names` function in `rlang` package, which is also a member of the `tidyverse` family, to make them more informative.

```{r}
export_long <- export_long |> 
  set_names(c("country_kr", "type", "unit", "year", "export_kosis"))
```

We can filter the data for only export data using the `filter()` function. We can also convert the export data from thousands of dollars to dollars by multiplying the `export_kosis` column by 1000. We can also convert the `year` column to numeric using the `parse_number()` function from the `readr` package, which is also a member of the `tidyverse` family.

```{r}
export_long <- export_long |>
  filter(type == "수출액[천달러]") |> # we only need the export data which has the column name in Korean as "수출액[천달러]"
  mutate(export_kosis = parse_number(export_kosis) * 1000, # we convert the export data from thousands of dollars to dollars; sometimes there are commas that make the data character instead of numeric. So we use parse_number() function from the readr package to convert character to numeric data.
         year = parse_number(year)) |> # we convert the year column to numeric using parse_number() function from the readr package
  select(-type, -unit) # we do not need the type and unit columns
```

We repeat the same steps for the import data.

```{r}
import_long <- import |> 
  pivot_longer(4:62, names_to = "year", values_to = "import_kosis")

import_long <- import_long |> 
  set_names(c("country_kr", "type", "unit", "year", "import_kosis"))


import_long <- import_long |>
  filter(type == "수입액[천달러]") |> 
  mutate(import_kosis = parse_number(import_kosis) * 1000,
         year = parse_number(year)) |>
  select(-type, -unit)
```

Now, we can join the export and import data using the `left_join()` function.

```{r}
trade_long <- export_long |> 
  left_join(import_long, by = c("country_kr", "year"))
```

Here, we get a warning message that there are rows that have the same country name and year in both the export and import data. It is because, KOSIS reported trade with Palestine in two separate entries (probably, West Bank and Gaza are recorded separately), but assigning both the same name "팔레스타인 해방기구". We will ignore this warning for now.

### `iso3c_kr` function to convert Korean country names to iso3c country codes

Using the `iso3c_kr` function, we can simply convert Korean country names into iso3c country codes. For example, the following is the output of the `iso3c_kr` function for the Korean trade data:

```{r, echo=TRUE}

trade_long <- iso3c_kr(trade_long, "country_kr") #you copy paste the column name that has the Korean country names.

trade_long[c(50, 150, 250, 350, 450, 550), c(1,5, 2:4)] |> gt::gt()

```

We see that in this example, "계" (*gyae*) did not get any iso3c country code. This is because the `iso3c_kr` function could not find the iso3c country code for this entry. This is because, it is not a country name. "계" means total. It is best to check the data to see which entries did not get an iso3c code.

```{r}
missing_iso3c <- trade_long |> 
  filter(is.na(iso3c)) |> # we only need the rows that do not have iso3c country codes
  pull(country_kr) |> # pull() function is used to extract a column as a vector
  unique() # we need each Korean country name only once to see which ones are missing rather than having it for all years.

missing_iso3c

```

They mean "total", "IMF", "other", and "other countries" in Korean. In other words, we are not missing any countries, which is good.

Now let's convert the Korean country names in the aid data into iso3c country codes:

```{r, echo=TRUE}

aid <- iso3c_kr(aid, "country_kr") #you copy paste the column name that has the Korean country names.

aid[c(50, 150, 250, 350, 450, 550),c(1, 6, 2:5)] |> gt::gt()
```

Once you know the iso3c country codes, you can get the English country names, or other country codes (such as Correlates of War country codes) using the `countrycode` package, for example.

```{r}
trade_long <- trade_long |> 
  mutate(country_name = countrycode::countrycode(iso3c, origin = "iso3c", destination = "country.name"))

trade_long[c(50, 150, 250, 350, 450, 550),c(1, 5, 6, 2:4)] |> gt::gt()

```

More importantly, `iso3c_kr` function allows users to be able to join different datasets that have Korean country names. For example, one can join the trade data with the aid data using the iso3c country codes. In this example, I will join the trade data with the aid data using the iso3c country codes.

```{r, echo=TRUE}
trade_aid <- trade_long |> 
  left_join(aid, by = c("iso3c", "year"), suffix = c("_trade", "_aid"))

trade_aid |>
  filter(year == 2019 & !is.na(iso3c)) |> # just as a sample, we only need the data for 2019 and we exclude the rows that do not have iso3c country codes
  slice(c(30, 130, 230, 330, 430, 530)) |> # just as a sample, let's only look at the rows 30, 130, 230, 330, 430, and 530
  select(c(iso3c, country_kr_trade, country_kr_aid, year, export_kosis, import_kosis, aid_usd)) |> # just as a sample, let's only look at the columns that we are interested in
  gt::gt()
```

Voilà! Now we have a dataset that has both trade and aid data, both of which originally did not have consistent country names or country codes. If we only used `country_kr` column to join the two datasets, we would have failed to merge all the data, such as "콩고 민주공화국" and	"콩고민주공화국(DR콩고)", both of which are Democratic Republic of the Congo; or "도미니카 공화국"	and "도미니카공화국" (Dominican Republic) which merelt have a space difference between the words. But with the `iso3c_kr` function, we were able to merge the two datasets successfully.

## Working with dates

**To be added**
